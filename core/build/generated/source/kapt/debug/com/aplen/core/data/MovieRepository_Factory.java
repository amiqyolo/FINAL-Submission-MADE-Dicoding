// Generated by Dagger (https://dagger.dev).
package com.aplen.core.data;

import com.aplen.core.data.source.local.LocalDataSource;
import com.aplen.core.data.source.pref.DataStoreManager;
import com.aplen.core.data.source.remote.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MovieRepository_Factory implements Factory<MovieRepository> {
  private final Provider<RemoteDataSource> remoteProvider;

  private final Provider<LocalDataSource> localProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<DataStoreManager> prefProvider;

  public MovieRepository_Factory(Provider<RemoteDataSource> remoteProvider,
      Provider<LocalDataSource> localProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<DataStoreManager> prefProvider) {
    this.remoteProvider = remoteProvider;
    this.localProvider = localProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.prefProvider = prefProvider;
  }

  @Override
  public MovieRepository get() {
    return newInstance(remoteProvider.get(), localProvider.get(), compositeDisposableProvider.get(), prefProvider.get());
  }

  public static MovieRepository_Factory create(Provider<RemoteDataSource> remoteProvider,
      Provider<LocalDataSource> localProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<DataStoreManager> prefProvider) {
    return new MovieRepository_Factory(remoteProvider, localProvider, compositeDisposableProvider, prefProvider);
  }

  public static MovieRepository newInstance(RemoteDataSource remote, LocalDataSource local,
      CompositeDisposable compositeDisposable, DataStoreManager pref) {
    return new MovieRepository(remote, local, compositeDisposable, pref);
  }
}
