// Generated by Dagger (https://dagger.dev).
package com.aplen.movieaplen.di;

import androidx.lifecycle.ViewModel;
import com.aplen.core.di.CoreComponent;
import com.aplen.core.domain.repository.IMovieRepository;
import com.aplen.core.domain.usecase.MovieInteractor;
import com.aplen.core.domain.usecase.MovieInteractor_Factory;
import com.aplen.core.domain.usecase.MovieUseCase;
import com.aplen.core.ui.ViewModelFactory;
import com.aplen.movieaplen.ui.detail.DetailActivity;
import com.aplen.movieaplen.ui.detail.DetailActivity_MembersInjector;
import com.aplen.movieaplen.ui.detail.DetailViewModel;
import com.aplen.movieaplen.ui.detail.DetailViewModel_Factory;
import com.aplen.movieaplen.ui.home.HomeFragment;
import com.aplen.movieaplen.ui.home.HomeFragment_MembersInjector;
import com.aplen.movieaplen.ui.home.HomeViewModel;
import com.aplen.movieaplen.ui.home.HomeViewModel_Factory;
import com.aplen.movieaplen.ui.main.MainActivity;
import com.aplen.movieaplen.ui.main.MainActivity_MembersInjector;
import com.aplen.movieaplen.ui.main.MainViewModel;
import com.aplen.movieaplen.ui.main.MainViewModel_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final CoreComponent coreComponent;

  private final DaggerAppComponent appComponent = this;

  private Provider<IMovieRepository> provideRepositoryProvider;

  private Provider<MovieInteractor> movieInteractorProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private Provider<DetailViewModel> detailViewModelProvider;

  private DaggerAppComponent(CoreComponent coreComponentParam) {
    this.coreComponent = coreComponentParam;
    initialize(coreComponentParam);

  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private MovieInteractor movieInteractor() {
    return new MovieInteractor(Preconditions.checkNotNullFromComponent(coreComponent.provideRepository()));
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3).put(HomeViewModel.class, ((Provider) homeViewModelProvider)).put(MainViewModel.class, ((Provider) mainViewModelProvider)).put(DetailViewModel.class, ((Provider) detailViewModelProvider)).build();
  }

  private ViewModelFactory viewModelFactory() {
    return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CoreComponent coreComponentParam) {
    this.provideRepositoryProvider = new com_aplen_core_di_CoreComponent_provideRepository(coreComponentParam);
    this.movieInteractorProvider = MovieInteractor_Factory.create(provideRepositoryProvider);
    this.homeViewModelProvider = HomeViewModel_Factory.create(((Provider) movieInteractorProvider));
    this.mainViewModelProvider = MainViewModel_Factory.create(((Provider) movieInteractorProvider));
    this.detailViewModelProvider = DetailViewModel_Factory.create(((Provider) movieInteractorProvider));
  }

  @Override
  public MovieUseCase provideMovieInteractor() {
    return movieInteractor();
  }

  @Override
  public void inject(HomeFragment fragment) {
    injectHomeFragment(fragment);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(DetailActivity activity) {
    injectDetailActivity(activity);
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectFactory(instance, viewModelFactory());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectFactory(instance, viewModelFactory());
    return instance;
  }

  private DetailActivity injectDetailActivity(DetailActivity instance) {
    DetailActivity_MembersInjector.injectFactory(instance, viewModelFactory());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(CoreComponent coreComponent) {
      Preconditions.checkNotNull(coreComponent);
      return new DaggerAppComponent(coreComponent);
    }
  }

  private static final class com_aplen_core_di_CoreComponent_provideRepository implements Provider<IMovieRepository> {
    private final CoreComponent coreComponent;

    com_aplen_core_di_CoreComponent_provideRepository(CoreComponent coreComponent) {
      this.coreComponent = coreComponent;
    }

    @Override
    public IMovieRepository get() {
      return Preconditions.checkNotNullFromComponent(coreComponent.provideRepository());
    }
  }
}
