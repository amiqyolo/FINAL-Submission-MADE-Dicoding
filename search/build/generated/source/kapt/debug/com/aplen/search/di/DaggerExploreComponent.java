// Generated by Dagger (https://dagger.dev).
package com.aplen.search.di;

import androidx.lifecycle.ViewModel;
import com.aplen.core.domain.usecase.MovieUseCase;
import com.aplen.core.ui.ViewModelFactory;
import com.aplen.movieaplen.di.AppComponent;
import com.aplen.search.ui.ExploreFragment;
import com.aplen.search.ui.ExploreFragment_MembersInjector;
import com.aplen.search.ui.ExploreViewModel;
import com.aplen.search.ui.ExploreViewModel_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerExploreComponent implements ExploreComponent {
  private final DaggerExploreComponent exploreComponent = this;

  private Provider<MovieUseCase> provideMovieInteractorProvider;

  private Provider<ExploreViewModel> exploreViewModelProvider;

  private DaggerExploreComponent(AppComponent appComponentParam) {

    initialize(appComponentParam);

  }

  public static ExploreComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(ExploreViewModel.class, ((Provider) exploreViewModelProvider));
  }

  private ViewModelFactory viewModelFactory() {
    return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppComponent appComponentParam) {
    this.provideMovieInteractorProvider = new com_aplen_movieaplen_di_AppComponent_provideMovieInteractor(appComponentParam);
    this.exploreViewModelProvider = DoubleCheck.provider(ExploreViewModel_Factory.create(provideMovieInteractorProvider));
  }

  @Override
  public void inject(ExploreFragment fragment) {
    injectExploreFragment(fragment);
  }

  private ExploreFragment injectExploreFragment(ExploreFragment instance) {
    ExploreFragment_MembersInjector.injectFactory(instance, viewModelFactory());
    return instance;
  }

  private static final class Factory implements ExploreComponent.Factory {
    @Override
    public ExploreComponent create(AppComponent appComponent) {
      Preconditions.checkNotNull(appComponent);
      return new DaggerExploreComponent(appComponent);
    }
  }

  private static final class com_aplen_movieaplen_di_AppComponent_provideMovieInteractor implements Provider<MovieUseCase> {
    private final AppComponent appComponent;

    com_aplen_movieaplen_di_AppComponent_provideMovieInteractor(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public MovieUseCase get() {
      return Preconditions.checkNotNullFromComponent(appComponent.provideMovieInteractor());
    }
  }
}
