// Generated by Dagger (https://dagger.dev).
package com.aplen.core.di;

import android.content.Context;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import com.aplen.core.data.MovieRepository;
import com.aplen.core.data.MovieRepository_Factory;
import com.aplen.core.data.source.local.LocalDataSource;
import com.aplen.core.data.source.local.LocalDataSource_Factory;
import com.aplen.core.data.source.local.room.MovieDao;
import com.aplen.core.data.source.local.room.MovieDatabase;
import com.aplen.core.data.source.pref.DataStoreManager;
import com.aplen.core.data.source.pref.DataStoreManager_Factory;
import com.aplen.core.data.source.remote.RemoteDataSource;
import com.aplen.core.data.source.remote.RemoteDataSource_Factory;
import com.aplen.core.data.source.remote.network.ApiService;
import com.aplen.core.domain.repository.IMovieRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCoreComponent implements CoreComponent {
  private final DaggerCoreComponent coreComponent = this;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<RemoteDataSource> remoteDataSourceProvider;

  private Provider<Context> contextProvider;

  private Provider<MovieDatabase> provideDatabaseProvider;

  private Provider<MovieDao> provideFavoriteDaoProvider;

  private Provider<LocalDataSource> localDataSourceProvider;

  private Provider<CompositeDisposable> provideCompositeDisposableProvider;

  private Provider<DataStore<Preferences>> provideDataStoreManagerProvider;

  private Provider<DataStoreManager> dataStoreManagerProvider;

  private Provider<MovieRepository> movieRepositoryProvider;

  private DaggerCoreComponent(NetworkModule networkModuleParam, DatabaseModule databaseModuleParam,
      CompositeModule compositeModuleParam, DataStoreModule dataStoreModuleParam,
      Context contextParam) {

    initialize(networkModuleParam, databaseModuleParam, compositeModuleParam, dataStoreModuleParam, contextParam);

  }

  public static CoreComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final DatabaseModule databaseModuleParam, final CompositeModule compositeModuleParam,
      final DataStoreModule dataStoreModuleParam, final Context contextParam) {
    this.provideOkHttpClientProvider = NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam);
    this.provideApiServiceProvider = NetworkModule_ProvideApiServiceFactory.create(networkModuleParam, provideOkHttpClientProvider);
    this.remoteDataSourceProvider = DoubleCheck.provider(RemoteDataSource_Factory.create(provideApiServiceProvider));
    this.contextProvider = InstanceFactory.create(contextParam);
    this.provideDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideDatabaseFactory.create(databaseModuleParam, contextProvider));
    this.provideFavoriteDaoProvider = DatabaseModule_ProvideFavoriteDaoFactory.create(databaseModuleParam, provideDatabaseProvider);
    this.localDataSourceProvider = DoubleCheck.provider(LocalDataSource_Factory.create(provideFavoriteDaoProvider));
    this.provideCompositeDisposableProvider = CompositeModule_ProvideCompositeDisposableFactory.create(compositeModuleParam);
    this.provideDataStoreManagerProvider = DoubleCheck.provider(DataStoreModule_ProvideDataStoreManagerFactory.create(dataStoreModuleParam, contextProvider));
    this.dataStoreManagerProvider = DataStoreManager_Factory.create(provideDataStoreManagerProvider);
    this.movieRepositoryProvider = DoubleCheck.provider(MovieRepository_Factory.create(remoteDataSourceProvider, localDataSourceProvider, provideCompositeDisposableProvider, dataStoreManagerProvider));
  }

  @Override
  public IMovieRepository provideRepository() {
    return movieRepositoryProvider.get();
  }

  private static final class Factory implements CoreComponent.Factory {
    @Override
    public CoreComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new DaggerCoreComponent(new NetworkModule(), new DatabaseModule(), new CompositeModule(), new DataStoreModule(), context);
    }
  }
}
